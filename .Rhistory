s2_mask <- image_mask("SCL", values = c(3, 8, 9, 10))
} else if (source == "landsat") {
# Para Landsat
s2_collection <- stac_image_collection(items$features,
asset_names = assets,
property_filter = function(x) {
if (!is.null(x[["eo:cloud_cover"]]))
return(x[["eo:cloud_cover"]] < 80)
else
return(TRUE)
})
# Usar QA_PIXEL para Landsat (diferentes valores que Sentinel)
# Referencia: https://www.usgs.gov/landsat-missions/landsat-collection-2-quality-assessment-bands
# Bits 3-4: Cloud (01 = cloud)
# Esto es simplificado, un enfoque mejor sería hacer una operación de bits
s2_mask <- image_mask("QA_PIXEL", min = 0, max = 21952) # Excluir valores de nubes
}
# Crear una vista de cubo con resolución media (para evitar problemas de memoria)
cube_grid <- cube_view(srs = "EPSG:4326",
extent = list(left = bbox_progreso$left,
right = bbox_progreso$right,
top = bbox_progreso$top,
bottom = bbox_progreso$bottom,
t0 = substr(tiempo, 1, 10),
t1 = substr(tiempo, 12, 21)),
dx = 0.0002,  # Resolución media (~20m en el ecuador)
dy = 0.0002,
dt = "P15D",  # Agregación quincenal (cada 15 días)
resampling = "bilinear",
aggregation = "median")
# Crear cubo raster con mejor manejo de errores y diagnóstico
print("Verificando metadatos de imágenes antes de crear el cubo...")
# Intenta extraer información detallada sobre las fechas disponibles
fechas_detalles <- tryCatch({
fechas <- sapply(items$features, function(x) x$properties$datetime)
unique_fechas <- sort(unique(substr(fechas, 1, 10)))
print(paste("Fechas disponibles:", paste(unique_fechas, collapse=", ")))
print(paste("Total fechas únicas:", length(unique_fechas)))
# Verificar integridad de los assets
assets_check <- lapply(items$features[1:min(3, length(items$features))], function(feature) {
feature_assets <- names(feature$assets)
missing_assets <- assets[!assets %in% feature_assets]
if (length(missing_assets) > 0) {
print(paste("Advertencia: Faltan assets en una imagen:",
paste(missing_assets, collapse=", ")))
}
return(list(
fecha = substr(feature$properties$datetime, 1, 10),
assets_disponibles = feature_assets,
falta_assets = missing_assets
))
})
TRUE
}, error = function(e) {
print(paste("Error al verificar metadatos:", e$message))
FALSE
})
# Progresivamente intentar con configuraciones más simples
print("Intentando crear cubo con múltiples estrategias...")
# Estrategia 1: Con máscara y configuración original
s2_cube <- tryCatch({
print("Estrategia 1: Creando cubo raster con máscara de nubes...")
raster_cube(image_collection = s2_collection,
view = cube_grid,
mask = s2_mask,
chunking = c(1, 512, 512)) # Tamaño de chunk moderado
}, error = function(e) {
print(paste("Estrategia 1 falló:", e$message))
# Estrategia 2: Sin máscara de nubes
print("Estrategia 2: Intentando crear cubo sin máscara de nubes...")
tryCatch({
raster_cube(image_collection = s2_collection,
view = cube_grid,
chunking = c(1, 512, 512))
}, error = function(e2) {
print(paste("Estrategia 2 falló:", e2$message))
# Estrategia 3: Reducir resolución temporal y espacial
print("Estrategia 3: Usando resolución reducida y agregación mensual...")
tryCatch({
simple_grid <- cube_view(srs = "EPSG:4326",
extent = list(left = bbox_progreso$left,
right = bbox_progreso$right,
top = bbox_progreso$top,
bottom = bbox_progreso$bottom,
t0 = substr(tiempo, 1, 10),
t1 = substr(tiempo, 12, 21)),
dx = 0.0005, # Resolución más baja
dy = 0.0005,
dt = "P1M")  # Agregación mensual
raster_cube(image_collection = s2_collection,
view = simple_grid,
chunking = c(1, 256, 256))  # Chunks más pequeños
}, error = function(e3) {
print(paste("Estrategia 3 falló:", e3$message))
# Estrategia 4: Reducir aún más la resolución y utilizar menos imágenes
print("Estrategia 4: Usando resolución muy baja y límite de imágenes...")
# Intentar limitar el número de imágenes
if (length(items$features) > 10) {
print(paste("Limitando análisis a las 10 imágenes con menor cobertura de nubes"))
# Extraer coberturas de nubes
coberturas <- sapply(items$features, function(x) {
if(!is.null(x$propertieslibrary(magrittr)
library(colorspace)
# Verificar que el cubo se creó correctamente
if (!is.null(s2_cube)) {
print("Cubo creado correctamente. Dimensiones:")
print(paste("- Tiempo:", length(s2_cube$dimensions$t$values), "puntos"))
print(paste("- Bandas:", length(s2_cube$dimensions$bands$values),
"->", paste(s2_cube$dimensions$bands$values, collapse=", ")))
print(paste("- Tamaño espacial:",
length(s2_cube$dimensions$y$values), "x",
length(s2_cube$dimensions$x$values), "pixeles"))
} else {
stop("No se pudo crear el cubo raster después de múltiples intentos.")
}
# Configurar bandas según la fuente
if (source == "landsat") {
# Para Landsat: SR_B4=red, SR_B3=green, SR_B2=blue, SR_B5=NIR
rgb_bands <- c("SR_B4", "SR_B3", "SR_B2")
ndvi_bands <- c("SR_B5", "SR_B4") # NIR, Red
ndwi_bands <- c("SR_B3", "SR_B5") # Green, NIR
} else {
# Para Sentinel-2: B04=red, B03=green, B02=blue, B08=NIR
rgb_bands <- c("B04", "B03", "B02")
ndvi_bands <- c("B08", "B04") # NIR, Red
ndwi_bands <- c("B03", "B08") # Green, NIR
}
# Visualizar en color verdadero (RGB) con manejo de datos faltantes
print("Generando visualización RGB...")
tryCatch({
# Verificar si hay datos disponibles
rgb_data <- s2_cube %>% select_bands(rgb_bands)
# Verificar datos válidos para dimensionar correctamente la visualización
print("Comprobando la presencia de datos válidos...")
# Procesar las bandas para obtener estadísticas
band_stats <- lapply(rgb_bands, function(band) {
band_cube <- s2_cube %>% select_bands(band)
values <- band_cube$dimensions$bands$values
# Verificar si la banda tiene datos
tryCatch({
# Intenta recuperar estadísticas básicas
band_data <- gdalcubes::reduce_time(band_cube, "median()")
summary_data <- summary(as.array(band_data))
has_data <- !all(is.na(summary_data))
list(
band = band,
has_data = has_data,
min = if (has_data) min(summary_data, na.rm = TRUE) else NA,
max = if (has_data) max(summary_data, na.rm = TRUE) else NA
)
}, error = function(e) {
print(paste("No hay datos válidos para la banda", band, ":", e$message))
list(band = band, has_data = FALSE, min = NA, max = NA)
})
})
# Mostrar información sobre las bandas
print("Información de las bandas:")
for (stat in band_stats) {
if (stat$has_data) {
print(paste("Banda", stat$band, "- Datos válidos: SÍ, Rango:",
round(stat$min, 2), "a", round(stat$max, 2)))
} else {
print(paste("Banda", stat$band, "- Datos válidos: NO"))
}
}
# Verificar si tenemos suficientes datos para la visualización
all_bands_valid <- all(sapply(band_stats, function(x) x$has_data))
if (all_bands_valid) {
print("Todas las bandas contienen datos. Generando visualización...")
# Determinar límites adecuados para la visualización
if (source == "landsat") {
zlim_min <- 0
zlim_max <- max(sapply(band_stats, function(x) x$max), na.rm = TRUE)
zlim_max <- min(zlim_max * 1.2, 15000) # Ajustar para mejor contraste
} else {
zlim_min <- 0
zlim_max <- max(sapply(band_stats, function(x) x$max), na.rm = TRUE)
zlim_max <- min(zlim_max * 1.2, 5000) # Ajustar para mejor contraste
}
print(paste("Usando límites de visualización:", zlim_min, "a", zlim_max))
# Visualizar con límites adaptados
s2_cube %>%
select_bands(rgb_bands) %>%
plot(rgb = 1:3, zlim = c(zlim_min, zlim_max),
main = "Puerto Progreso - Color Natural (Adaptativo)")
} else {
print("ERROR: No hay suficientes datos válidos para la visualización RGB.")
print("Intentando con otra configuración...")
# Intentar visualizar una sola banda como alternativa
valid_bands <- which(sapply(band_stats, function(x) x$has_data))
if (length(valid_bands) > 0) {
print(paste("Intentando visualizar solo la banda", band_stats[[valid_bands[1]]]$band))
s2_cube %>%
select_bands(band_stats[[valid_bands[1]]]$band) %>%
plot(main = paste("Puerto Progreso - Banda", band_stats[[valid_bands[1]]]$band, "(Alternativa)"))
} else {
print("No se pudo visualizar ninguna banda. Compruebe la consulta STAC y los parámetros.")
}
}
}, error = function(e) {
print(paste("Error en visualización RGB:", e$message))
})
# Intentar visualizar NDVI (adaptando a la fuente) con manejo de errores mejorado
print("Calculando NDVI...")
tryCatch({
# Verificar la disponibilidad de las bandas necesarias
print(paste("Verificando disponibilidad de bandas para NDVI:", paste(ndvi_bands, collapse=", ")))
# Comprobar si las bandas existen en el cubo
available_bands <- s2_cube$dimensions$bands$values
print(paste("Bandas disponibles en el cubo:", paste(available_bands, collapse=", ")))
all_bands_available <- all(ndvi_bands %in% available_bands)
if (!all_bands_available) {
missing_bands <- ndvi_bands[!ndvi_bands %in% available_bands]
print(paste("ERROR: Faltan bandas necesarias para NDVI:", paste(missing_bands, collapse=", ")))
return()
}
# Intentar seleccionar las bandas y comprobar si hay datos
print("Comprobando datos en las bandas seleccionadas...")
ndvi_check <- s2_cube %>% select_bands(ndvi_bands)
# Verificar cada banda por separado para diagnóstico
band_data_check <- lapply(ndvi_bands, function(band) {
tryCatch({
single_band <- s2_cube %>% select_bands(band)
band_data <- single_band %>% reduce_time("median()")
summary_data <- summary(as.array(band_data))
has_data <- !all(is.na(summary_data))
if (has_data) {
print(paste("La banda", band, "contiene datos válidos. Rango:",
round(min(summary_data, na.rm=TRUE), 2), "a",
round(max(summary_data, na.rm=TRUE), 2)))
} else {
print(paste("La banda", band, "no contiene datos válidos"))
}
has_data
}, error = function(e) {
print(paste("Error al verificar la banda", band, ":", e$message))
FALSE
})
})
if (!all(unlist(band_data_check))) {
print("No se pueden calcular índices porque faltan datos en algunas bandas")
return()
}
# Si llegamos aquí, podemos calcular el NDVI
print("Calculando NDVI con los datos disponibles...")
ndvi <- ndvi_check
# Calcular NDVI con comprobación de valores no válidos
if (source == "landsat") {
ndvi <- ndvi %>%
apply_pixel(paste0("(", ndvi_bands[1], "==", ndvi_bands[1], " && ",
ndvi_bands[2], "==", ndvi_bands[2], " && ",
ndvi_bands[1], "+", ndvi_bands[2], "!=0) ? ",
"(", ndvi_bands[1], "-", ndvi_bands[2], ")/",
"(", ndvi_bands[1], "+", ndvi_bands[2], ") : NA"),
"NDVI")
} else {
ndvi <- ndvi %>%
apply_pixel(paste0("(", ndvi_bands[1], "==", ndvi_bands[1], " && ",
ndvi_bands[2], "==", ndvi_bands[2], " && ",
ndvi_bands[1], "+", ndvi_bands[2], "!=0) ? ",
"(", ndvi_bands[1], "-", ndvi_bands[2], ")/",
"(", ndvi_bands[1], "+", ndvi_bands[2], ") : NA"),
"NDVI")
}
# Verificar si tenemos datos de NDVI
ndvi_stats <- tryCatch({
ndvi_data <- ndvi %>% reduce_time("median()")
ndvi_summary <- summary(as.array(ndvi_data))
has_ndvi <- !all(is.na(ndvi_summary))
if (has_ndvi) {
print(paste("NDVI calculado correctamente. Rango:",
round(min(ndvi_summary, na.rm=TRUE), 2), "a",
round(max(ndvi_summary, na.rm=TRUE), 2)))
list(has_data = TRUE, min = min(ndvi_summary, na.rm=TRUE), max = max(ndvi_summary, na.rm=TRUE))
} else {
print("El cálculo de NDVI no produjo datos válidos")
list(has_data = FALSE)
}
}, error = function(e) {
print(paste("Error al verificar datos NDVI:", e$message))
list(has_data = FALSE)
})
if (ndvi_stats$has_data) {
# Ajustar límites para mejor visualización
ndvi_min <- max(-0.2, floor(ndvi_stats$min * 10) / 10)
ndvi_max <- min(0.9, ceiling(ndvi_stats$max * 10) / 10)
print(paste("Visualizando NDVI con límites:", ndvi_min, "a", ndvi_max))
# Visualizar NDVI con paleta personalizada
ndvi_col <- function(n) { rev(sequential_hcl(n, "Green-Yellow")) }
plot(ndvi, col = ndvi_col(100), zlim = c(ndvi_min, ndvi_max),
main = "Puerto Progreso - NDVI")
}
}, error = function(e) {
print(paste("Error en cálculo de NDVI:", e$message))
})
# Calcular y visualizar NDWI (Índice de Agua) con manejo mejorado
print("Calculando NDWI (Índice de Agua)...")
tryCatch({
# Verificar si las bandas necesarias están disponibles
available_bands <- s2_cube$dimensions$bands$values
if (!all(ndwi_bands %in% available_bands)) {
missing_bands <- ndwi_bands[!ndwi_bands %in% available_bands]
print(paste("No se puede calcular NDWI. Faltan estas bandas:",
paste(missing_bands, collapse=", ")))
# Intentar una alternativa si es posible
if (source == "landsat") {
# Para Landsat podríamos intentar con otras bandas
print("Intentando cálculo alternativo de NDWI con otras bandas disponibles...")
alt_bands <- c("SR_B2", "SR_B5")  # Blue, NIR
if (all(alt_bands %in% available_bands)) {
print("Usando NDWI alternativo: (Blue-NIR)/(Blue+NIR)")
ndwi <- s2_cube %>%
select_bands(alt_bands) %>%
apply_pixel("(SR_B2-SR_B5)/(SR_B2+SR_B5)", "NDWI_alt")
} else {
return()
}
} else {
# Para Sentinel-2 también podríamos intentar alternativa
alt_bands <- c("B02", "B08")  # Blue, NIR
if (all(alt_bands %in% available_bands)) {
print("Usando NDWI alternativo: (Blue-NIR)/(Blue+NIR)")
ndwi <- s2_cube %>%
select_bands(alt_bands) %>%
apply_pixel("(B02-B08)/(B02+B08)", "NDWI_alt")
} else {
return()
}
}
} else {
# Cálculo normal de NDWI
ndwi <- s2_cube %>% select_bands(ndwi_bands)
# Utilizar fórmulas con comprobaciones de datos válidos
if (source == "landsat") {
ndwi <- ndwi %>%
apply_pixel(paste0("(", ndwi_bands[1], "==", ndwi_bands[1], " && ",
ndwi_bands[2], "==", ndwi_bands[2], " && ",
ndwi_bands[1], "+", ndwi_bands[2], "!=0) ? ",
"(", ndwi_bands[1], "-", ndwi_bands[2], ")/",
"(", ndwi_bands[1], "+", ndwi_bands[2], ") : NA"),
"NDWI")
} else {
ndwi <- ndwi %>%
apply_pixel(paste0("(", ndwi_bands[1], "==", ndwi_bands[1], " && ",
ndwi_bands[2], "==", ndwi_bands[2], " && ",
ndwi_bands[1], "+", ndwi_bands[2], "!=0) ? ",
"(", ndwi_bands[1], "-", ndwi_bands[2], ")/",
"(", ndwi_bands[1], "+", ndwi_bands[2], ") : NA"),
"NDWI")
}
}
# Verificar si tenemos datos de NDWI válidos
ndwi_stats <- tryCatch({
ndwi_data <- ndwi %>% reduce_time("median()")
ndwi_summary <- summary(as.array(ndwi_data))
has_ndwi <- !all(is.na(ndwi_summary))
if (has_ndwi) {
print(paste("NDWI calculado correctamente. Rango:",
round(min(ndwi_summary, na.rm=TRUE), 2), "a",
round(max(ndwi_summary, na.rm=TRUE), 2)))
# Determinar límites óptimos para visualización
ndwi_min <- max(-0.8, floor(min(ndwi_summary, na.rm=TRUE) * 10) / 10)
ndwi_max <- min(0.8, ceiling(max(ndwi_summary, na.rm=TRUE) * 10) / 10)
list(has_data = TRUE, min = ndwi_min, max = ndwi_max)
} else {
print("El cálculo de NDWI no produjo datos válidos")
list(has_data = FALSE)
}
}, error = function(e) {
print(paste("Error al verificar datos NDWI:", e$message))
list(has_data = FALSE)
})
if (ndwi_stats$has_data) {
# Visualizar NDWI con paleta azul y límites adaptados
print(paste("Visualizando NDWI con límites:", ndwi_stats$min, "a", ndwi_stats$max))
# Paleta mejorada para NDWI (agua en azul, tierra en marrón)
ndwi_pal <- function(n) {
# Primera mitad: tierra (marrón claro)
# Segunda mitad: agua (azul)
mitad <- ceiling(n/2)
c(rev(sequential_hcl(mitad, "Terrain2")),
sequential_hcl(n - mitad, "Blues"))
}
# Visualizar con paleta personalizada
plot(ndwi,
col = ndwi_pal(100),
zlim = c(ndwi_stats$min, ndwi_stats$max),
main = "Puerto Progreso - NDWI (Índice de Agua)")
# Intentar crear una visualización con máscara para destacar agua
print("Generando mapa binario de agua/tierra...")
tryCatch({
# Umbral típico para NDWI: valores positivos indican agua
ndwi %>%
apply_pixel("NDWI > 0.0 ? 1 : 0", "agua") %>%
plot(col = c("tan", "darkblue"),
main = "Puerto Progreso - Máscara de Agua (NDWI > 0)")
}, error = function(e) {
print(paste("Error al generar máscara de agua:", e$message))
})
}
}, error = function(e) {
print(paste("Error en cálculo de NDWI:", e$message))
})
# Análisis del puerto con mejores imágenes
print("Analizando imágenes para encontrar la mejor...")
tryCatch({
# Filtrar para encontrar la imagen con menor cobertura de nubes
mejores_idx <- NULL
if (!is.null(items$features)) {
coberturas <- sapply(items$features, function(x) {
if(!is.null(x$properties$`eo:cloud_cover`)) {
return(x$properties$`eo:cloud_cover`)
} else {
return(100) # Valor alto si no hay información
}
})
mejores_idx <- which(coberturas < 30) # Imágenes con menos del 30% de nubes
if (length(mejores_idx) > 0) {
print(paste("Encontradas", length(mejores_idx), "imágenes con menos del 30% de cobertura de nubes"))
# Tomar la mejor imagen (menor cobertura)
mejor_imagen_idx <- mejores_idx[which.min(coberturas[mejores_idx])]
fecha_mejor <- items$features[[mejor_imagen_idx]]$properties$datetime
print(paste("Mejor imagen:", substr(fecha_mejor, 1, 10),
"con", round(coberturas[mejor_imagen_idx], 1), "% de nubes"))
# Crear una vista específica para esta fecha
fecha_inicio <- substr(fecha_mejor, 1, 10)
fecha_fin <- substr(fecha_mejor, 1, 10)
# Crear un cubo específico para la mejor imagen
mejor_grid <- cube_view(srs = "EPSG:4326",
extent = list(left = bbox_progreso$left,
right = bbox_progreso$right,
top = bbox_progreso$top,
bottom = bbox_progreso$bottom,
t0 = fecha_inicio,
t1 = fecha_fin),
dx = 0.0001,  # Alta resolución (~10m)
dy = 0.0001,
dt = "P1D",
resampling = "bilinear")
# Intentar crear un cubo específico para la mejor imagen
mejor_cubo <- tryCatch({
mejor_collection <- stac_image_collection(
list(items$features[[mejor_imagen_idx]]),
asset_names = assets)
raster_cube(image_collection = mejor_collection,
view = mejor_grid,
chunking = c(1, 512, 512))
}, error = function(e) {
print(paste("Error al crear cubo para la mejor imagen:", e$message))
return(NULL)
})
if (!is.null(mejor_cubo)) {
# Visualizar la mejor imagen en RGB
print("Visualizando mejor imagen en color natural...")
if (source == "landsat") {
mejor_cubo %>%
select_bands(rgb_bands) %>%
plot(rgb = 1:3, zlim = c(0, 10000),
main = paste("Puerto Progreso -", substr(fecha_mejor, 1, 10)))
} else {
mejor_cubo %>%
select_bands(rgb_bands) %>%
plot(rgb = 1:3, zlim = c(0, 3000),
main = paste("Puerto Progreso -", substr(fecha_mejor, 1, 10)))
}
# Crear un enfoque específico en la zona portuaria
puerto_bbox = list(left = -89.67, bottom = 21.28, right = -89.64, top = 21.31)
puerto_grid <- cube_view(srs = "EPSG:4326",
extent = list(left = puerto_bbox$left,
right = puerto_bbox$right,
top = puerto_bbox$top,
bottom = puerto_bbox$bottom,
t0 = fecha_inicio,
t1 = fecha_fin),
dx = 0.00005,  # Resolución muy alta (~5m)
dy = 0.00005,
dt = "P1D",
resampling = "bilinear")
# Intentar crear un cubo para el puerto
puerto_cubo <- tryCatch({
raster_cube(image_collection = mejor_collection,
view = puerto_grid,
chunking = c(1, 512, 512))
}, error = function(e) {
print(paste("Error al crear cubo para el puerto:", e$message))
return(NULL)
})
if (!is.null(puerto_cubo)) {
print("Visualizando zona portuaria en detalle...")
if (source == "landsat") {
puerto_cubo %>%
select_bands(rgb_bands) %>%
plot(rgb = 1:3, zlim = c(0, 10000),
main = "Puerto Principal - Alta Resolución")
} else {
puerto_cubo %>%
select_bands(rgb_bands) %>%
plot(rgb = 1:3, zlim = c(0, 3000),
main = "Puerto Principal - Alta Resolución")
}
}
}
} else {
print("No se encontraron imágenes con baja cobertura de nubes.")
}
}
}, error = function(e) {
print(paste("Error en análisis del puerto:", e$message))
})
print("=== Análisis de Puerto Progreso completado ===")
setwd("~/Documents/Proyectos_ALI_Desarrollo/Sistema_monitoreo")
shiny::runApp()
